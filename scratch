print('i: '+ str(i))
            print('j: '+ str(j))
            techReport['features'][i]['properties']['name']
            techReport['features'][j]['properties']['name']
            print()


# def findColocatedTechs():
    # dictionary length?
    # techLocationData[1]['features'][1]['geometry']['coordinates'])
    # for tech in techs
        # for otherTech in techs
            # dist = (hs.haversine(loc1,loc2) * 1000)
            # if dist < 1000ft (304.8m)
                # add it to an object containing pairs of nearby techs
    # return object containing pairs of techs




# sends each batch of data timed appropriately
def timeReports(): # techLocationData):
    global numberOfReports
    for x in range(0, numberOfReports):
        colocatedTechs = findColocatedTechs(techLocationData[x])
        #TODO send tech locations and colocated techs to frontend
        time.sleep(0)


https://tech-loc-api.herokuapp.com/api/v1/solar_farms/000001/technicians
https://tech-loc-api.herokuapp.com/api/v1/solar_farms/000001/colocated_technicians


http://127.0.0.1:5000/api/v1/solar_farms/000001/technicians
http://127.0.0.1:5000/api/v1/solar_farms/000001/colocated_technicians



#new

# new
from http.server import HTTPServer, SimpleHTTPRequestHandler, test
import sys

class CORSRequestHandler (SimpleHTTPRequestHandler):
    def end_headers (self):
        self.send_header('Access-Control-Allow-Origin', '*')
        SimpleHTTPRequestHandler.end_headers(self)

if __name__ == '__main__':
    test(CORSRequestHandler, HTTPServer, port=int(sys.argv[1]) if len(sys.argv) > 1 else 5000)

# end new